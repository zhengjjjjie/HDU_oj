/***
	No.2079 选课时间-一维动态规划（多重背包问题） 
	又到了选课的时间了，xhd看着选课表发呆，为了想让下一学期好过点，他想知道学n个学分共有多少组合。
	你来帮帮他吧。（xhd认为一样学分的课没区别）
	
	Input:输入数据的第一行是一个数据T，表示有T组数据。
		每组数据的第一行是两个整数n(1 <= n <= 40)，k(1 <= k <= 8)。
		接着有k行，每行有两个整数a(1 <= a <= 8),b(1 <= b <= 10)，表示学分为a的课有b门
		
	Output:对于每组输入数据，输出一个整数，表示学n个学分的组合数。
	
	SampleInput:
		2
		2 2
		1 2
		2 1
		40 8
		1 1
		2 2
		3 2
		4 2
		5 8
		6 9
		7 6
		8 8
		
	SampleOutput:
		2
		445
		
	注：01背包问题、完全背包问题、多重背包问题
	(1)0-1背包问题是指每一种物品都只有一件，可以选择放或者不放；
	(2)完全背包问题是指每种物品都有无限件 
	(3)多重背包问题限定了一种物品的个数，解决多重背包问题，只需要把它转化为0-1背包问题即可。
	比如，有2件价值为5，重量为2的同一物品，我们就可以分为物品a和物品b，a和b的价值都为5，重量都为2，
	但我们把它们视作不同的物品。
	 
***/ 
# include<iostream>
# include<cstring> //memset() 
using namespace std;

int a[11],b[11];
int dp[41];

int main() {
	//一维动态规划-多重背包问题 
	int T;
	cin >> T;
	int n,k;
	while(T--) {
		cin >> n >> k;
		for(int i=1; i<=k; i++) { // k行 
			cin >> a[i] >> b[i]; //学分为a的课有b门
		}
		memset(dp, 0, sizeof(dp)); 
		dp[0] = 1; //0学分用0门课 有一种组合
		for(int i=1; i<=k; i++) { //遍历k种物品
			for(int j=n; j>=a[i]; j--) { //n-背包总容量 
				for(int l=1; l*a[i]<=j && l<=b[i]; l++) { // 
                    dp[j] = dp[j] + dp[j-l*a[i]];
                }
			}
		}
		cout << dp[n] << endl;
	}
	return 0;
}
