/**
	No.2047 阿牛的EOF牛肉串
	今年的ACM暑期集训队一共有18人，分为6支队伍。其中有一个叫做EOF的队伍，由04级的阿牛、XC以及05级的COY组成。
	在共同的集训生活中，大家建立了深厚的友谊，阿牛准备做点什么来纪念这段激情燃烧的岁月，想了一想，阿牛从家里拿来了一块上等的牛肉干，
	准备在上面刻下一个长度为n的只由"E" "O" "F"三种字符组成的字符串（可以只有其中一种或两种字符，但绝对不能有其他字符）,
	阿牛同时禁止在串中出现O相邻的情况，他认为，"OO"看起来就像发怒的眼睛，效果不好。

	你，NEW ACMer,EOF的崇拜者，能帮阿牛算一下一共有多少种满足要求的不同的字符串吗？
	
	PS: 阿牛还有一个小秘密，就是准备把这个刻有 EOF的牛肉干，作为神秘礼物献给杭电五十周年校庆，可以想象，当校长接过这块牛肉干的时候该
	有多高兴！这里，请允许我代表杭电的ACMer向阿牛表示感谢！
	
	再次感谢！
	
	Input:输入数据包含多个测试实例,每个测试实例占一行,由一个整数n组成，(0<n<40)。
	Output:对于每个测试实例，请输出全部的满足要求的涂法，每个实例的输出占一行。
	
	SampleInput:
		1
		2
		
	SampleOutput:
		3
		8
	
	解题思路：禁止OO相邻 
		从后往前递推，当第n个为"O"时，根据条件，第n-1个不能为"O"，那么n-1的情况有两种，即为"E"或"F"，有2*dp[n-2]种情况 
		当第n个不为"O"时，则可能为"E"或"F"，所以这种情况有2*dp[n-1]个
		综上，dp[n] = dp[n-2]*2 + dp[n-1]*2 
	
**/ 
# include<iostream>
# include<vector> 
using namespace std;

vector<long long int> dp(41,0); // 注意 int -> long long int 

int main() {
	// 动态规划---斐波那契数列 
	int n;
	dp[1] = 3;
	dp[2] = 8;
	for(int i=3; i<=40; i++) {
		dp[i] = 2* (dp[i-1] + dp[i-2]);
	}
	while(cin >> n && n) {
		cout << dp[n] << endl;
	}
	return 0;
}
